#version 330

out vec4 FragColor;

in vec3 tnorm;
in vec3 vertex_inWorldSpace;
in vec2 vertTex;

vec3 ambient_light_color = vec3(0.5, 0.5, 0.5);
vec3 diffuse_light_color = vec3(0.5, 0.5, 0.5);
vec3 spec_light_color = vec3(0.5, 0.5, 0.5);

uniform sampler2D sTexture;
uniform vec3 light_position;
uniform vec3 object_color; // Uniform should be used when multiple objects

uniform vec3 view_pos;
uniform float specular_coef;

vec3 view_dir;

void main()
{
	// ambient
	float ambient_strength = 0.75;
	vec3 ambient = ambient_strength * ambient_light_color;

	// defuse
	vec3 norm = normalize(tnorm);
	vec3 lightDir = normalize(light_position - vertex_inWorldSpace);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * diffuse_light_color;

	// specular
	float specularStrength = 1;
	view_dir = normalize(light_position - vertex_inWorldSpace);
	vec3 reflect_dir = normalize(reflect(lightDir, tnorm));
	float spec_dot = max(dot(view_dir, reflect_dir), 0.0);
	float spec = pow(spec_dot, 1.0);
	vec3 specular = spec * specularStrength * spec_light_color;


	vec3 result = (ambient + diffuse) * texture(sTexture, vertTex).rgb;

	FragColor = vec4(result, 1.0);
}